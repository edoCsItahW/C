---
# 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto
Language: Cpp
BasedOnStyle: LLVM
AccessModifierOffset: -4  # 访问说明符(public、private等)的偏移
AlignAfterOpenBracket: BlockIndent  # 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)
AlignConsecutiveAssignments: true  # 连续赋值时，对齐所有等号
AlignConsecutiveDeclarations: false  # 连续声明时，对齐所有声明的变量名
# 左对齐逃脱换行(使用反斜杠换行)的反斜杠
AlignEscapedNewlinesLeft: true
AlignArrayOfStructures: Left  # 对齐结构体数组的元素: Left, Right, Center
AlignOperands: false  # 水平对齐二元和三元表达式的操作数
AlignTrailingComments: true  # 对齐连续的尾随的注释
AlignEscapedNewlines: Right  # 对齐转义的换行符: Left, Right, DontAlign
AllowAllParametersOfDeclarationOnNextLine: true  # 允许函数声明的所有参数在放在下一行
AllowShortBlocksOnASingleLine: Always  # 允许短的块放在同一行
AllowShortCaseLabelsOnASingleLine: true  # 允许短的case标签放在同一行
AllowShortFunctionsOnASingleLine: All  # 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All
AllowShortIfStatementsOnASingleLine: true  # 允许短的if语句保持在同一行
AllowShortLoopsOnASingleLine: true  # 允许短的循环保持在同一行
AllowShortCompoundRequirementOnASingleLine: true  # 允许短的复合条件放在同一行
AllowShortEnumsOnASingleLine: true  # 允许短的枚举放在同一行
AllowShortLambdasOnASingleLine: All  # 允许短的lambda放在同一行: None, Empty, Inline, All
AllowBreakBeforeNoexceptSpecifier: Never  # 在noexcept说明符前不允许换行: Never, MultiLine(多行), Always
# 总是在定义返回类型后换行(deprecated)
AlwaysBreakAfterDefinitionReturnType: None
AlwaysBreakAfterReturnType: None  # 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数), AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义)
AlwaysBreakBeforeMultilineStrings: false  # 总是在多行string字面量前换行
AlwaysBreakTemplateDeclarations: Yes  # 总是在template声明后换行
BinPackArguments: true  # false表示函数实参要么都在同一行，要么都各自一行
BinPackParameters: true  # false表示所有形参要么都在同一行，要么都各自一行
# 大括号换行，只有当BreakBeforeBraces设置为Custom时才有效
BraceWrapping:
    AfterCaseLabel: false  # case标签后面
    AfterClass: false  # class定义后面
    AfterControlStatement: false  # 控制语句后面
    AfterEnum: false  # enum定义后面
    AfterFunction: false  # 函数定义后面
    AfterNamespace: false  # 命名空间定义后面
    # ObjC定义后面
    AfterObjCDeclaration: false
    AfterStruct: false  # struct定义后面
    AfterUnion: false  # union定义后面
    AfterExternBlock: false  # 外部块定义后面
    BeforeCatch: true  # catch之前
    BeforeElse: true  # else之前
    BeforeLambdaBody: true  # lambda函数体之前
    BeforeWhile: true  # while之前
    IndentBraces: false  # 缩进大括号
BreakBeforeBinaryOperators: NonAssignment  # 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)
# 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似),
#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似),
#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom
#   注：这里认为语句块也属于函数
BreakBeforeBraces: Attach
BreakBeforeTernaryOperators: true  # 在三元运算符前换行
BreakConstructorInitializersBeforeComma: false  # 在构造函数的初始化列表的逗号前换行
BitFieldColonSpacing: After  # 位域的冒号后面是否加空格: Before, After
BreakAdjacentStringLiterals: true  # 在相邻的string字面量中断开换行
BreakAfterAttributes: Never  # 在属性后换行: Never, MultiLine, Always
BreakBeforeConceptDeclarations: Always  # 在concept声明前换行
BreakConstructorInitializers: BeforeComma  # 在构造函数的初始化列表中断开换行: BeforeColon, BeforeComma, AfterColon, AfterComma
BreakBeforeInlineASMColon: OnlyMultiline  # 在inline ASM语句的冒号前换行: Never, BeforeColon, AfterColon, OnlyBeforeColon, OnlyAfterColon, OnlyMultiline
ColumnLimit: 200  # 每行字符的限制，0表示没有限制
CommentPragmas: '^#pragma:'  # 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变
ConstructorInitializerAllOnOneLineOrOnePerLine: false  # 构造函数的初始化列表要么都在同一行，要么都各自一行
ConstructorInitializerIndentWidth: 4  # 构造函数的初始化列表的缩进宽度
ContinuationIndentWidth: 4  # 延续的行的缩进宽度
Cpp11BracedListStyle: true  # 去除C++11的列表初始化的大括号{后和}前的空格
DerivePointerAlignment: true  # 继承最常用的指针和引用的对齐方式
DisableFormat: false  # 关闭格式化
ExperimentalAutoDetectBinPacking: false  # 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)
EmptyLineBeforeAccessModifier: LogicalBlock  # 访问说明符之前是否留空行: Never, Always, LogicalBlock(只有在多个访问说明符之间才留空行)
ForEachMacros: [ foreach, Q_FOREACH, BOOST_FOREACH ]  # 需要被解读为foreach循环而不是函数调用的宏
# 对#include进行排序，匹配了某正则表达式的#include拥有对应的优先级，匹配不到的则默认优先级为INT_MAX(优先级越小排序越靠前)，
# 可以定义负数优先级从而保证某些#include永远在最前面
IncludeCategories:
    -   Regex: '^"(llvm|llvm-c|clang|clang-c)/'
        Priority: 2
    -   Regex: '^(<|"(gtest|isl|json)/)'
        Priority: 3
    -   Regex: '.*'
        Priority: 1
IndentCaseLabels: true  # 缩进case标签
IndentWidth: 4  # 缩进宽度
InsertBraces: false   # 在if、for、while、switch、catch、else、do、try、while后面添加空格
IndentWrappedFunctionNames: false  # 函数返回类型换行时，缩进函数声明或函数定义的函数名
IndentAccessModifiers: false  # 缩进访问说明符(public、private等)
IndentExternBlock: Indent  # 缩进外部块: None, Indent, Dedent
IncludeBlocks: Merge  # 合并#include块: Merge, Regroup, None
IndentGotoLabels: true  # 缩进goto标签
IndentPPDirectives: BeforeHash  # 缩进预处理指令: BeforeHash, AfterHash, BeforeColon, AfterColon, BeforeSemi, AfterSemi
ReferenceAlignment: Left  # 引用的对齐方式: Left, Right, Center
RemoveBracesLLVM: true  # 去除LLVM的大括号风格
RemoveParentheses: ReturnStatement  # 去除括号: None, All, ConditionalsAndLogicalOperators, FunctionCalls, FunctionDeclarations, ControlStatements, ReturnStatement, ControlStatementsAndArguments, AllExceptArguments, AllExceptArgumentsAndQualifiers, AllExceptArgumentsAndTemplateArguments, AllExceptArgumentsAndTemplateArgumentsAndQualifiers, AllExceptTrailingReturn
RemoveSemicolon: true   # 去除语句末尾的分号
RequiresClausePosition: OwnLine  # requires子句的位置: Before, After, OwnLine
RequiresExpressionIndentation: OuterScope  # requires表达式的缩进: Inner, OuterScope, Same, None
LambdaBodyIndentation: Signature  # lambda函数体的缩进: None, Inner(缩进嵌套的lambda函数体), Signature(缩进lambda函数签名)
KeepEmptyLinesAtTheStartOfBlocks: false  # 保留在块开始处的空行
MacroBlockBegin: ''  # 开始一个块的宏的正则表达式
MacroBlockEnd: ''  # 结束一个块的宏的正则表达式
MaxEmptyLinesToKeep: 1  # 连续空行的最大数量
NamespaceIndentation: All  # 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All
# 使用ObjC块时缩进宽度
ObjCBlockIndentWidth: 4
# 在ObjC的@property后添加一个空格
ObjCSpaceAfterProperty: false
# 在ObjC的protocol列表前添加一个空格
ObjCSpaceBeforeProtocolList: true
QualifierAlignment: Left  # 修饰符的对齐方式: Left, Right, Center
PenaltyBreakBeforeFirstCallParameter: 19  # 在call(后对函数调用换行的penalty
PenaltyBreakComment: 200  # 在一个注释中引入换行的penalty
PenaltyBreakFirstLessLess: 100  # 第一次在<<前换行的penalty
PenaltyBreakString: 100  # 在一个字符串字面量中引入换行的penalty
PenaltyExcessCharacter: 1000000  # 对于每个在行字符数限制之外的字符的penalty
PenaltyReturnTypeOnItsOwnLine: 200  # 将函数的返回类型放到它自己的行的penalty
PointerAlignment: Left  # 指针和引用的对齐: Left, Right, Middle
ReflowComments: true  # 允许重新排版注释
SortIncludes: CaseSensitive  # 允许排序#include
SeparateDefinitionBlocks: Always  # 定义块是否单独成行: Never, Always, ExternC
SpaceAfterLogicalNot: false  # 在逻辑非(!)后添加空格
SpaceAfterTemplateKeyword: false  # 在模板关键字后添加空格
SpaceAfterCStyleCast: false  # 在C风格类型转换后添加空格
SpaceBeforeCaseColon: false  # 在case后面和冒号(:)之前添加空格
SpaceBeforeCpp11BracedList: false  # 在C++11的列表初始化的大括号{前添加空格
SpaceBeforeCtorInitializerColon: false  # 在构造函数的初始化列表冒号(:)之前添加空格
SpaceBeforeJsonColon: false  # 在JSON对象冒号(:)之前添加空格
SpaceBeforeAssignmentOperators: true  # 在赋值运算符之前添加空格
SpaceBeforeParens: ControlStatements  # 开圆括号之前添加一个空格: Never, ControlStatements, Always
SpaceBeforeParensOptions:
    AfterControlStatements: true  # 在控制语句后面添加空格
    AfterForeachMacros: false  # 在foreach宏后面添加空格
    AfterFunctionDeclarationName: false  # 在函数声明的名字后面添加空格
    AfterFunctionDefinitionName: false  # 在函数定义的名字后面添加空格
    AfterIfMacros: false  # 在if宏后面添加空格
    AfterOverloadedOperator: false  # 在重载运算符后面添加空格
    AfterPlacementOperator: true  # 在赋值运算符前面添加空格
    AfterRequiresInClause: false  # 在requires子句后面添加空格
    AfterRequiresInExpression: false  # 在requires表达式后面添加空格
    BeforeNonEmptyParentheses: false  # 在非空的圆括号前添加空格
SpaceBeforeRangeBasedForLoopColon: true  # 在range-based for循环的冒号(:)之前添加空格
SpaceBeforeSquareBrackets: false  # 在方括号的[前添加空格
SpaceInEmptyBlock: false  # 在空的块中添加空格
SpacesInParensOptions:
    InConditionalStatements: false  # 在条件语句中的圆括号中添加空格
    InCStyleCasts: false  # 在C风格类型转换中的圆括号中添加空格
    InEmptyParentheses: false  # 在空的圆括号中添加空格
    Other: false  # 在其他地方添加空格
SpaceInEmptyParentheses: false  # 在空的圆括号中添加空格
SpacesBeforeTrailingComments: 2  # 在尾随的评论前添加的空格数(只适用于//)
SpacesInAngles: Never  # 在尖括号的<后和>前添加空格
SpacesInContainerLiterals: false  # 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格
SpacesInCStyleCastParentheses: false  # 在C风格类型转换的括号中添加空格
SpacesInParentheses: false  # 在圆括号的(后和)前添加空格
SpacesInSquareBrackets: false  # 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响
Standard: Latest  # 标准: Cpp03, Cpp11, Auto
TabWidth: 4  # tab宽度
UseTab: Never  # 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, Always

